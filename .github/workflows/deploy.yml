name: Deploy Laravel Jetstream + Inertia to Hostinger (PHP 8.1)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, zip, bcmath, gd, pdo, pdo_mysql, fileinfo
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install composer deps (no-dev)
        run: composer install --no-dev --optimize-autoloader --prefer-dist

      - name: Build Vite assets (Jetstream/Inertia)
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi

      - name: Prune CI artifacts
        run: |
          rm -rf node_modules
          rm -rf tests
          rm -rf .git
          rm -rf .github
          rm -f .env

      - name: Prepare staging dir
        run: |
          rm -rf deploy_staging
          mkdir deploy_staging
          rsync -a . deploy_staging \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'node_modules' \
            --exclude 'tests' \
            --exclude 'vendor' \
            --exclude 'storage/logs' \
            --exclude 'storage/framework/cache/data'
      - name: Create release archive
        run: |
          tar -czf release.tar.gz -C deploy_staging .

      - name: Start ssh-agent
        id: sshagent
        run: |
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV

      - name: Add private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-add ~/.ssh/id_ed25519

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create directories on server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p apps/axontis"

      - name: Upload release to server
        run: |
          scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no release.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/apps/axontis/release.tar.gz

      - name: Deploy on server (expects PHP 8.1 configured on Hostinger)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "export DB_NAME='${{ secrets.DB_NAME }}' DB_USER='${{ secrets.DB_USER }}' DB_PASSWORD='${{ secrets.DB_PASSWORD }}' DB_HOST='${{ secrets.DB_HOST }}'; /bin/bash" << 'EOF'
          set -e

          # Use absolute paths based on Hostinger structure
          APP_DIR="/home/u177717572/apps/axontis"
          WEB_DIR="/home/u177717572/public_html"

          echo "Current directory: $(pwd)"
          echo "APP_DIR: $APP_DIR"
          echo "WEB_DIR: $WEB_DIR"
          
          mkdir -p "$APP_DIR" "$WEB_DIR"
          cd "$APP_DIR"

          # Décompression
          tar -xzf release.tar.gz
          rm -f release.tar.gz

          # Composer install (prod)
          composer install --no-dev --optimize-autoloader --prefer-dist

          # .env géré côté serveur
          if [ ! -f .env ]; then
            cp .env.example .env
            php artisan key:generate
          fi

          # Configure MySQL database for Hostinger
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env

          # Migrations
          php artisan migrate --force || true

          # Caches
          php artisan config:cache || true
          php artisan route:cache || true
          php artisan view:cache || true

          # Permissions
          chmod -R 755 storage bootstrap/cache || true

          # Copy Laravel public files to web root
          echo "Copying files to web directory..."
          cp -f public/.htaccess "$WEB_DIR/" || echo "Failed to copy .htaccess"
          
          # Copy assets
          if [ -d "public/build" ]; then
            mkdir -p "$WEB_DIR/build"
            cp -r public/build/* "$WEB_DIR/build/" || echo "Failed to copy build assets"
          fi
          
          # Copy other public assets
          [ -d "public/css" ] && cp -r public/css "$WEB_DIR/" || true
          [ -d "public/js" ] && cp -r public/js "$WEB_DIR/" || true
          [ -d "public/images" ] && cp -r public/images "$WEB_DIR/" || true

          # Create storage symlink
          if [ ! -L "$WEB_DIR/storage" ]; then
            ln -sf "$APP_DIR/storage/app/public" "$WEB_DIR/storage" || echo "Failed to create storage symlink"
          fi

          # Create index.php file
          echo '<?php' > "$WEB_DIR/index.php"
          echo '$root = "/home/u177717572/apps/axontis";' >> "$WEB_DIR/index.php"
          echo 'require $root . "/vendor/autoload.php";' >> "$WEB_DIR/index.php"
          echo '$app = require_once $root . "/bootstrap/app.php";' >> "$WEB_DIR/index.php"
          echo '$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);' >> "$WEB_DIR/index.php"
          echo '$response = $kernel->handle(' >> "$WEB_DIR/index.php"
          echo '    $request = Illuminate\Http\Request::capture()' >> "$WEB_DIR/index.php"
          echo ')->send();' >> "$WEB_DIR/index.php"
          echo '$kernel->terminate($request, $response);' >> "$WEB_DIR/index.php"

          # Debug: Show what we created
          echo "Files in web directory:"
          ls -la "$WEB_DIR/"

          echo "Deployment complete (PHP 8.1)"
          EOF