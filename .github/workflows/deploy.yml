name: Deploy Laravel Jetstream + Inertia to Hostinger (PHP 8.1)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, zip, bcmath, gd, pdo, pdo_mysql, fileinfo
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install composer deps (no-dev)
        run: composer install --no-dev --optimize-autoloader --prefer-dist

      - name: Build Vite assets (Jetstream/Inertia)
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi

      - name: Prune CI artifacts
        run: |
          rm -rf node_modules
          rm -rf tests
          rm -rf .git
          rm -rf .github
          rm -f .env

      - name: Prepare staging dir
        run: |
          rm -rf deploy_staging
          mkdir deploy_staging
          rsync -a . deploy_staging \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'node_modules' \
            --exclude 'tests' \
            --exclude 'vendor' \
            --exclude 'storage/logs' \
            --exclude 'storage/framework/cache/data'
      - name: Create release archive
        run: |
          tar -czf release.tar.gz -C deploy_staging .

      - name: Start ssh-agent
        id: sshagent
        run: |
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV

      - name: Add private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-add ~/.ssh/id_ed25519

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create directories on server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p domains/axontis.net/apps/axontis domains/axontis.net/public_html"

      - name: Upload release to server
        run: |
          scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no release.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/domains/axontis.net/apps/axontis/release.tar.gz

      - name: Deploy on server (expects PHP 8.1 configured on Hostinger)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "export DB_NAME='${{ secrets.DB_NAME }}' DB_USER='${{ secrets.DB_USER }}' DB_PASSWORD='${{ secrets.DB_PASSWORD }}' DB_HOST='${{ secrets.DB_HOST }}' HOSTINGER_USER_ID='${{ secrets.HOSTINGER_USER_ID }}'; /bin/bash" << 'EOF'
          set -e

          # Debug environment
          echo "=== ENVIRONMENT DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Current user: $(whoami)"
          echo "Home directory: $HOME"
          echo "Hostinger User ID: $HOSTINGER_USER_ID"
          
          # Check if the hostinger path exists
          HOSTINGER_PATH="/home/${HOSTINGER_USER_ID}"
          echo "Checking Hostinger path: $HOSTINGER_PATH"
          
          if [ -d "$HOSTINGER_PATH" ]; then
            echo "✅ Hostinger path exists"
            BASE_PATH="$HOSTINGER_PATH"
          else
            echo "❌ Hostinger path doesn't exist, using HOME: $HOME"
            BASE_PATH="$HOME"
          fi
          
          # Use relative paths from base directory
          APP_DIR="domains/axontis.net/apps/axontis"
          WEB_DIR="domains/axontis.net/public_html"
          
          # Get absolute paths
          APP_PATH="$BASE_PATH/$APP_DIR"
          WEB_PATH="$BASE_PATH/$WEB_DIR"

          echo "BASE_PATH: $BASE_PATH"
          echo "APP_PATH: $APP_PATH"
          echo "WEB_PATH: $WEB_PATH"
          
          # Create directories in both locations if needed
          mkdir -p "$HOME/$APP_DIR" "$HOME/$WEB_DIR"
          if [ "$BASE_PATH" != "$HOME" ]; then
            mkdir -p "$APP_PATH" "$WEB_PATH"
          fi
          echo "✅ Created directories"
          
          # Change to app directory (use HOME path for operations)
          cd "$HOME/$APP_DIR"
          echo "Changed to directory: $(pwd)"

          # Décompression
          echo "=== EXTRACTING RELEASE ==="
          tar -xzf release.tar.gz
          rm -f release.tar.gz
          echo "✅ Release extracted"

          # Composer install (prod)
          echo "=== COMPOSER INSTALL ==="
          composer install --no-dev --optimize-autoloader --prefer-dist

          # .env géré côté serveur
          if [ ! -f .env ]; then
            cp .env.example .env
            php artisan key:generate
            echo "✅ .env file created and key generated"
          else
            echo "✅ .env file already exists"
          fi

          # Configure MySQL database for Hostinger
          echo "=== DATABASE CONFIGURATION ==="
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
          echo "✅ Database configuration updated"

          # Migrations
          echo "=== RUNNING MIGRATIONS ==="
          php artisan migrate --force || echo "⚠️ Migration failed or no migrations to run"

          # Caches
          echo "=== BUILDING CACHES ==="
          php artisan config:cache || echo "⚠️ Config cache failed"
          php artisan route:cache || echo "⚠️ Route cache failed"
          php artisan view:cache || echo "⚠️ View cache failed"

          # Permissions
          echo "=== SETTING PERMISSIONS ==="
          chmod -R 755 storage bootstrap/cache || echo "⚠️ Permission setting failed"

          # Copy files to both locations if different
          if [ "$BASE_PATH" != "$HOME" ]; then
            echo "=== SYNCING TO HOSTINGER PATH ==="
            rsync -av "$HOME/$APP_DIR/" "$APP_PATH/"
            echo "✅ App files synced to Hostinger path"
          fi

          # Go back to home directory for web operations
          cd $HOME
          
          # Copy Laravel public files to web root (use HOME path)
          echo "=== COPYING PUBLIC FILES ==="
          
          # Copy .htaccess
          if [ -f "$HOME/$APP_DIR/public/.htaccess" ]; then
            cp "$HOME/$APP_DIR/public/.htaccess" "$HOME/$WEB_DIR/" && echo "✅ .htaccess copied" || echo "❌ Failed to copy .htaccess"
          fi
          
          # Copy build assets
          if [ -d "$HOME/$APP_DIR/public/build" ]; then
            mkdir -p "$HOME/$WEB_DIR/build"
            cp -r "$HOME/$APP_DIR/public/build"/* "$HOME/$WEB_DIR/build/" && echo "✅ Build assets copied" || echo "❌ Failed to copy build assets"
          fi
          
          # Copy other public assets
          for dir in css js images; do
            if [ -d "$HOME/$APP_DIR/public/$dir" ]; then
              cp -r "$HOME/$APP_DIR/public/$dir" "$HOME/$WEB_DIR/" && echo "✅ $dir directory copied" || echo "❌ Failed to copy $dir"
            fi
          done

          # Create storage symlink
          echo "=== CREATING STORAGE SYMLINK ==="
          if [ ! -L "$HOME/$WEB_DIR/storage" ]; then
            ln -sf "$APP_PATH/storage/app/public" "$HOME/$WEB_DIR/storage" && echo "✅ Storage symlink created" || echo "❌ Failed to create storage symlink"
          else
            echo "✅ Storage symlink already exists"
          fi

          # Create index.php file using the Hostinger path
          echo "=== CREATING INDEX.PHP ==="
          echo '<?php' > "$HOME/$WEB_DIR/index.php"
          echo "\$root = \"$APP_PATH\";" >> "$HOME/$WEB_DIR/index.php"
          echo 'require $root . "/vendor/autoload.php";' >> "$HOME/$WEB_DIR/index.php"
          echo '$app = require_once $root . "/bootstrap/app.php";' >> "$HOME/$WEB_DIR/index.php"
          echo '$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);' >> "$HOME/$WEB_DIR/index.php"
          echo '$response = $kernel->handle(' >> "$HOME/$WEB_DIR/index.php"
          echo '    $request = Illuminate\Http\Request::capture()' >> "$HOME/$WEB_DIR/index.php"
          echo ')->send();' >> "$HOME/$WEB_DIR/index.php"
          echo '$kernel->terminate($request, $response);' >> "$HOME/$WEB_DIR/index.php"
          echo "✅ index.php created"

          # Copy web files to Hostinger path if different
          if [ "$BASE_PATH" != "$HOME" ]; then
            echo "=== SYNCING WEB FILES TO HOSTINGER PATH ==="
            rsync -av "$HOME/$WEB_DIR/" "$WEB_PATH/"
            echo "✅ Web files synced to Hostinger path"
          fi

          # Create test files
          echo "=== CREATING TEST FILES ==="
          echo "Test deployment $(date)" > "$HOME/$WEB_DIR/deployment-test.txt"
          echo "Laravel App Deployed Successfully" > "$HOME/$WEB_DIR/test.html"
          echo "✅ Test files created"

          # Create debug files using the Hostinger path
          echo "=== CREATING DEBUG FILES ==="
          echo "<?php phpinfo(); ?>" > "$HOME/$WEB_DIR/info.php"
          
          echo '<?php' > "$HOME/$WEB_DIR/test-laravel.php"
          echo 'error_reporting(E_ALL);' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'ini_set("display_errors", 1);' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'echo "<h1>Laravel Test</h1>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo "\$root = \"$APP_PATH\";" >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'echo "<p>App root: " . $root . "</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'echo "<p>Vendor exists: " . (is_dir($root . "/vendor") ? "YES" : "NO") . "</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'echo "<p>Bootstrap exists: " . (file_exists($root . "/bootstrap/app.php") ? "YES" : "NO") . "</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'echo "<p>.env exists: " . (file_exists($root . "/.env") ? "YES" : "NO") . "</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo 'try {' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '    require $root . "/vendor/autoload.php";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '    echo "<p>✅ Autoload successful</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '    $app = require_once $root . "/bootstrap/app.php";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '    echo "<p>✅ Bootstrap successful</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '} catch (Exception $e) {' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '    echo "<p>❌ Error: " . $e->getMessage() . "</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '    echo "<p>File: " . $e->getFile() . ":" . $e->getLine() . "</p>";' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo '}' >> "$HOME/$WEB_DIR/test-laravel.php"
          echo "✅ Debug files created"

          # Sync debug files to Hostinger path if different
          if [ "$BASE_PATH" != "$HOME" ]; then
            rsync -av "$HOME/$WEB_DIR/" "$WEB_PATH/"
            echo "✅ Debug files synced to Hostinger path"
          fi

          # Final verification
          echo "=== FINAL VERIFICATION ==="
          echo "Files in HOME web directory:"
          ls -la "$HOME/$WEB_DIR/"
          
          if [ "$BASE_PATH" != "$HOME" ]; then
            echo "Files in Hostinger web directory:"
            ls -la "$WEB_PATH/" || echo "❌ Cannot access Hostinger web directory"
          fi
          
          echo "Content of index.php:"
          cat "$HOME/$WEB_DIR/index.php"

          echo "🎉 Deployment complete (PHP 8.1)"
          EOF