name: Deploy Laravel Jetstream + Inertia to Hostinger (PHP 8.1)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, zip, bcmath, gd, pdo, pdo_mysql, fileinfo
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install composer deps (no-dev)
        run: composer install --no-dev --optimize-autoloader --prefer-dist

      - name: Build Vite assets (Jetstream/Inertia)
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi

      - name: Prune CI artifacts
        run: |
          rm -rf node_modules
          rm -rf tests
          rm -rf .git
          rm -rf .github
          rm -f .env

      - name: Prepare staging dir
        run: |
          rm -rf deploy_staging
          mkdir deploy_staging
          rsync -a . deploy_staging \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'node_modules' \
            --exclude 'tests' \
            --exclude 'vendor' \
            --exclude 'storage/logs' \
            --exclude 'storage/framework/cache/data'
      - name: Create release archive
        run: |
          tar -czf release.tar.gz -C deploy_staging .

      - name: Start ssh-agent
        id: sshagent
        run: |
          eval "$(ssh-agent -s)"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV

      - name: Add private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-add ~/.ssh/id_ed25519

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create directories on server
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p domains/axontis.net/apps/axontis domains/axontis.net/public_html"

      - name: Upload release to server
        run: |
          scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no release.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/domains/axontis.net/apps/axontis/release.tar.gz

      - name: Deploy on server (expects PHP 8.1 configured on Hostinger)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "export DB_NAME='${{ secrets.DB_NAME }}' DB_USER='${{ secrets.DB_USER }}' DB_PASSWORD='${{ secrets.DB_PASSWORD }}' DB_HOST='${{ secrets.DB_HOST }}'; /bin/bash" << 'EOF'
          set -e

          # Debug environment
          echo "=== ENVIRONMENT DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Current user: $(whoami)"
          echo "Home directory: $HOME"
          echo "Listing home contents:"
          ls -la $HOME/
          
          # Use relative paths from home directory
          APP_DIR="domains/axontis.net/apps/axontis"
          WEB_DIR="domains/axontis.net/public_html"

          echo "APP_DIR: $APP_DIR"
          echo "WEB_DIR: $WEB_DIR"
          
          # Verify and create directories step by step
          echo "=== CREATING DIRECTORIES ==="
          
          # Create domains directory
          if [ ! -d "domains" ]; then
            mkdir -p domains
            echo "‚úÖ Created domains directory"
          else
            echo "‚úÖ domains directory exists"
          fi
          
          # Create axontis.net directory
          if [ ! -d "domains/axontis.net" ]; then
            mkdir -p domains/axontis.net
            echo "‚úÖ Created domains/axontis.net directory"
          else
            echo "‚úÖ domains/axontis.net directory exists"
          fi
          
          # Create apps and public_html directories
          mkdir -p "$APP_DIR" "$WEB_DIR"
          echo "‚úÖ Created $APP_DIR and $WEB_DIR directories"
          
          # Verify directories exist
          echo "=== DIRECTORY VERIFICATION ==="
          [ -d "$APP_DIR" ] && echo "‚úÖ $APP_DIR exists" || echo "‚ùå $APP_DIR missing"
          [ -d "$WEB_DIR" ] && echo "‚úÖ $WEB_DIR exists" || echo "‚ùå $WEB_DIR missing"
          
          # Change to app directory
          cd "$APP_DIR"
          echo "Changed to directory: $(pwd)"

          # D√©compression
          echo "=== EXTRACTING RELEASE ==="
          tar -xzf release.tar.gz
          rm -f release.tar.gz
          echo "‚úÖ Release extracted"

          # Composer install (prod)
          echo "=== COMPOSER INSTALL ==="
          composer install --no-dev --optimize-autoloader --prefer-dist

          # .env g√©r√© c√¥t√© serveur
          if [ ! -f .env ]; then
            cp .env.example .env
            php artisan key:generate
            echo "‚úÖ .env file created and key generated"
          else
            echo "‚úÖ .env file already exists"
          fi

          # Configure MySQL database for Hostinger
          echo "=== DATABASE CONFIGURATION ==="
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
          echo "‚úÖ Database configuration updated"

          # Migrations
          echo "=== RUNNING MIGRATIONS ==="
          php artisan migrate --force || echo "‚ö†Ô∏è Migration failed or no migrations to run"

          # Caches
          echo "=== BUILDING CACHES ==="
          php artisan config:cache || echo "‚ö†Ô∏è Config cache failed"
          php artisan route:cache || echo "‚ö†Ô∏è Route cache failed"
          php artisan view:cache || echo "‚ö†Ô∏è View cache failed"

          # Permissions
          echo "=== SETTING PERMISSIONS ==="
          chmod -R 755 storage bootstrap/cache || echo "‚ö†Ô∏è Permission setting failed"

          # Go back to home directory for file operations
          cd $HOME
          
          # Verify web directory exists before copying
          echo "=== PREPARING WEB DIRECTORY ==="
          if [ ! -d "$WEB_DIR" ]; then
            mkdir -p "$WEB_DIR"
            echo "‚úÖ Created web directory: $WEB_DIR"
          fi
          
          # Test write permissions
          if touch "$WEB_DIR/test_write" 2>/dev/null; then
            rm -f "$WEB_DIR/test_write"
            echo "‚úÖ Web directory is writable"
          else
            echo "‚ùå Web directory is not writable"
            ls -la "$WEB_DIR"
            exit 1
          fi

          # Copy Laravel public files to web root
          echo "=== COPYING PUBLIC FILES ==="
          
          # Copy .htaccess
          if [ -f "$APP_DIR/public/.htaccess" ]; then
            cp "$APP_DIR/public/.htaccess" "$WEB_DIR/" && echo "‚úÖ .htaccess copied" || echo "‚ùå Failed to copy .htaccess"
          fi
          
          # Copy build assets
          if [ -d "$APP_DIR/public/build" ]; then
            mkdir -p "$WEB_DIR/build"
            cp -r "$APP_DIR/public/build"/* "$WEB_DIR/build/" && echo "‚úÖ Build assets copied" || echo "‚ùå Failed to copy build assets"
          fi
          
          # Copy other public assets
          for dir in css js images; do
            if [ -d "$APP_DIR/public/$dir" ]; then
              cp -r "$APP_DIR/public/$dir" "$WEB_DIR/" && echo "‚úÖ $dir directory copied" || echo "‚ùå Failed to copy $dir"
            fi
          done

          # Create storage symlink
          echo "=== CREATING STORAGE SYMLINK ==="
          if [ ! -L "$WEB_DIR/storage" ]; then
            ln -sf "$HOME/$APP_DIR/storage/app/public" "$WEB_DIR/storage" && echo "‚úÖ Storage symlink created" || echo "‚ùå Failed to create storage symlink"
          else
            echo "‚úÖ Storage symlink already exists"
          fi

          # Create index.php file
          echo "=== CREATING INDEX.PHP ==="
          cat > "$WEB_DIR/index.php" << INDEXPHP
            <?php
            \$root = \$_SERVER['HOME'] . "/domains/axontis.net/apps/axontis";
            if (!is_dir(\$root)) {
                \$root = getenv('HOME') . "/domains/axontis.net/apps/axontis";
            }
            require \$root . "/vendor/autoload.php";
            \$app = require_once \$root . "/bootstrap/app.php";
            \$kernel = \$app->make(Illuminate\Contracts\Http\Kernel::class);
            \$response = \$kernel->handle(
                \$request = Illuminate\Http\Request::capture()
            )->send();
            \$kernel->terminate(\$request, \$response);
            INDEXPHP
          echo "‚úÖ index.php created"

          # Create test files
          echo "=== CREATING TEST FILES ==="
          echo "Test deployment $(date)" > "$WEB_DIR/deployment-test.txt"
          echo "Laravel App Deployed Successfully" > "$WEB_DIR/test.html"
          echo "‚úÖ Test files created"

          # Final verification
          echo "=== FINAL VERIFICATION ==="
          echo "Files in web directory:"
          ls -la "$WEB_DIR/"
          
          echo "Content of index.php:"
          cat "$WEB_DIR/index.php"
          
          [ -f "$WEB_DIR/index.php" ] && echo "‚úÖ index.php exists" || echo "‚ùå index.php missing"
          [ -f "$WEB_DIR/.htaccess" ] && echo "‚úÖ .htaccess exists" || echo "‚ùå .htaccess missing"

          echo "üéâ Deployment complete (PHP 8.1)"
          EOF